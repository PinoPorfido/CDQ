@model CDQ.Models.Helper.HelpChart
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Dashboard";
}

<script src="/lib/chart/Chart.js"></script>
<script src="/lib/chart/chartjs-plugin-datalabels.min.js"></script>

<br />

<div class="columns">
    <div class="column is-full" align="center">
        <h1 class="title is-4">Statistiche del Gestore</h1>
    </div>
</div>

<div class="column is-12">

    <div class="tile is-ancestor">
        <div class="tile is-vertical is-parent">
            <div class="tile">
                <div class="tile is-6 is-vertical is-parent">
                    <div class="tile is-child box">
                        <canvas id="myChart0"></canvas>
                    </div>
                    <div class="tile is-child box">
                        <canvas id="myChart2"></canvas>
                    </div>
                </div>
                <div class="tile is-6 is-vertical is-parent ">
                    <div class="tile is-child box">
                        <canvas id="myChart1"></canvas>
                    </div>
                    <div class="tile is-child box">
                        <canvas id="myChart3"></canvas>
                    </div>
                </div>
            </div>
            @*<div class="tile is-parent">
                <div class="tile is-child box">
                    <canvas id="myChart4"></canvas>
                </div>
            </div>*@
        </div>
    </div>
</div>

<script>
    var ctx = document.getElementById('myChart0');
    var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: [@Html.Raw(Model.SerializeLabels(0))],
            datasets: [{
                label: 'Iscritti',
                data:           [ @Html.Raw(Model.SerializeValues(0))       ],
                backgroundColor:[ @Html.Raw(Model.SerializeColors(0))       ],
                borderWidth: 1
            }]
        },
        options: {
            title: {
                display: true  ,
                text: 'Numero Pratiche',
                fontSize: 18            },
            legend: {
                position: 'right'
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        let sum = 0;
                        let dataArr = data.datasets[0].data;
                        dataArr.map(data => {
                            sum += data;
                        });

                        var label = data.labels[tooltipItem.index] || '';
                        var value = data.datasets[0].data[tooltipItem.index];

                        let percentage = (value * 100 / sum).toFixed(2) + "%";

                        return label + ": " + percentage;
                    }
                }
            },
            plugins: {
                datalabels: {
                    color: 'white'
                }
            }
        }
    });</script>

<script>
    var ctx = document.getElementById('myChart1');
    var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: [@Html.Raw(Model.SerializeLabels(1))],
            datasets: [{
                label: 'Agenti',
                data:           [ @Html.Raw(Model.SerializeValues(1))       ],
                backgroundColor:[ @Html.Raw(Model.SerializeColors(1))       ],
                borderWidth: 1
            }]
        },
        options: {
            title: {
                display: true  ,
                text: 'Distribuzione Pratiche per Status',
                fontSize: 18
            },
            legend: {
                position: 'right'
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        let sum = 0;
                        let dataArr = data.datasets[0].data;
                        dataArr.map(data => {
                            sum += data;
                        });

                        var label = data.labels[tooltipItem.index] || '';
                        var value = data.datasets[0].data[tooltipItem.index];

                        let percentage = (value * 100 / sum).toFixed(2) + "%";

                        return label + ": " + percentage;
                    }
                }
            },
            plugins: {
                datalabels: {
                    color: 'white'
                }
            }
        }
    });</script>

<script>
    var ctx = document.getElementById('myChart2');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw(Model.SerializeLabels(2))],
            datasets: [{
                label: 'Saldo mensile',
                data:           [ @Html.Raw(Model.SerializeValues(2))       ],
                backgroundColor:[ @Html.Raw(Model.SerializeColors(2))       ],
                borderWidth: 1
            }]
        },
        options: {
            title: {
                display: true,
                text: ['@HttpContextAccessor.HttpContext.Session.GetString("descrizioneProvinciale")','Andamento Pratiche ultimi 6 Mesi'],
                fontSize: 18
            },
            legend: {
                display: false
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        callback: function (value, index, values) {
                            return '€ ' + value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
                        }
                    }
                }]
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        var label = data.datasets[tooltipItem.datasetIndex].label || '';

                        if (label) {
                            label += ': ';
                        }
                        label += '€ ' + tooltipItem.yLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");;
                        return label;
                    }
                }
            },
            plugins: {
                datalabels: {
                    display: false
                }
            }
        }
    });</script>



<script>
    var ctx = document.getElementById('myChart3');
    var myChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: [@Html.Raw(Model.SerializeLabels(3))],
            datasets: [
                {
                label: 'N.Servizi',
                data:           [ @Html.Raw(Model.SerializeValues(3))       ],
                backgroundColor:[ @Html.Raw(Model.SerializeColors(3))       ],
                borderWidth: 1
                }
            ]
        },
        options: {
            title: {
                display: true,
                text: ['N.Servizi Accessi alla piattaforma Ultimi 6 Mesi'],
                fontSize: 18
            },
            legend: {
                display: false
            },
            plugins: {
                datalabels: {
                    display: false
                }
            }
        }
    });</script>

@*<script>
    var ctx = document.getElementById('myChart4');
    var myChart = new Chart(ctx, {
        type: 'horizontalBar',
        data: {
            labels: [@Html.Raw(Model.SerializeLabels(4))],
            datasets: [{
                label: 'Totale',
                data:           [ @Html.Raw(Model.SerializeValues(4))       ],
                backgroundColor:[ @Html.Raw(Model.SerializeColors(4))       ],
                borderWidth: 1,
                idtutor: [@Html.Raw(Model.SerializeIDs(4))]
            }]
        },
        options: {
            title: {
                display: true,
                text: ['Andamento Tutor/SubReferenti ultimi 3 Mesi (€)'],
                fontSize: 18
            },
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true,
                        callback: function (value, index, values) {
                            return '€ ' + value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
                        }
                    }
                }]
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        var label = data.datasets[tooltipItem.datasetIndex].label || '';

                        if (label) {
                            label += ': ';
                        }
                        label += '€ ' + tooltipItem.xLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");;
                        return label;
                    }
                }
            },
            plugins: {
                datalabels: {
                    display: false
                }
            },
            events: ["mousemove","click"],
            hover: {
                mode: 'nearest'
            },
            onClick: function (event, element) {
                var activePoints = myChart.getElementsAtEvent(event);
                if (activePoints[0]) {
                    var chartData = activePoints[0]['_chart'].config.data;
                    var idx = activePoints[0]['_index'];

                    var label = chartData.labels[idx];
                    var value = chartData.datasets[0].data[idx];
                    var id = chartData.datasets[0].idtutor[idx];

                    var url = "/Home/SchedaAgente/" + id;

                    window.location.href = url;

                }
            }
        }
    });</script>*@
